# ESPECIFICACIONES PARA BACKEND - FUNCIONALIDAD DE INSCRIPCI√ìN

## üìã RESUMEN EJECUTIVO
Implementar funcionalidad de inscripci√≥n autom√°tica para fulbitos con timing, capacidad limitada y manejo de suplentes. El sistema debe sincronizar autom√°ticamente con la app m√≥vil sin WebSockets.

## üéØ OBJETIVOS
- Permitir inscripci√≥n autom√°tica cuando se abre el per√≠odo
- Manejar capacidad limitada (ej: 10 jugadores)
- Gestionar suplentes cuando se llena la capacidad
- Sincronizaci√≥n autom√°tica con la app m√≥vil
- APIs eficientes y escalables

## üîß APIS A IMPLEMENTAR

### 1. GET /api/auth/fulbito/{id}/registrations/
**Descripci√≥n**: Obtiene el estado completo de inscripci√≥n de un fulbito

**Headers**:
```
Authorization: Bearer {token}
Content-Type: application/json
```

**Response**:
```json
{
  "status": "success",
  "data": {
    "fulbito_id": 3,
    "registration_open": false,
    "opens_at": "2024-09-21T22:00:00Z",
    "current_time": "2024-09-19T15:30:00Z",
    "time_until_open": "2 days, 6 hours, 30 minutes",
    "capacity": 10,
    "registered_count": 0,
    "can_register": false,
    "players": [
      {
        "id": 1,
        "username": "jugador1",
        "phone": "+5493812345678",
        "photo_url": "/media/photo1.jpg",
        "registered_at": "2024-09-21T22:00:15Z",
        "position": 1,
        "averageSkills": {
          "speed": 75,
          "passing": 60,
          "stamina": 80,
          "shooting": 70,
          "dribbling": 65,
          "defending": 55
        }
      }
    ],
    "spots_available": 10,
    "is_user_registered": false,
    "user_position": null
  }
}
```

**L√≥gica del Backend**:
- Verificar que el fulbito existe y el usuario tiene acceso
- Calcular si la inscripci√≥n est√° abierta basado en `registration_start_day` y `registration_start_hour`
- Obtener lista de jugadores inscritos ordenados por `registered_at`
- Calcular posici√≥n de cada jugador
- Verificar si el usuario actual ya est√° inscrito
- Calcular spots disponibles

### 2. POST /api/auth/fulbito/{id}/register/
**Descripci√≥n**: Permite a un usuario inscribirse en un fulbito

**Headers**:
```
Authorization: Bearer {token}
Content-Type: application/json
```

**Request Body**:
```json
{}
```

**Response Success**:
```json
{
  "status": "success",
  "data": {
    "registration_id": 123,
    "position": 5,
    "registered_at": "2024-09-21T22:00:15Z",
    "message": "Inscripci√≥n exitosa"
  }
}
```

**Response Error (Capacidad llena)**:
```json
{
  "status": "error",
  "message": "Capacidad llena. Te has agregado como suplente.",
  "data": {
    "registration_id": 124,
    "position": 11,
    "registered_at": "2024-09-21T22:00:15Z",
    "is_substitute": true
  }
}
```

**L√≥gica del Backend**:
- Verificar que la inscripci√≥n est√° abierta
- Verificar que el usuario no est√° ya inscrito
- Verificar capacidad del fulbito
- Si hay espacio: inscribir normalmente
- Si est√° lleno: agregar como suplente
- Registrar timestamp exacto para orden de inscripci√≥n
- Retornar posici√≥n asignada

### 3. GET /api/auth/invitation/all/ (ACTUALIZAR)
**Descripci√≥n**: Obtiene todas las invitaciones y fulbitos del usuario

**Headers**:
```
Authorization: Bearer {token}
Content-Type: application/json
```

**Response** (ACTUALIZAR):
```json
{
  "status": "success",
  "data": {
    "nearby_fulbito_seconds": 7200,  // NUEVO CAMPO
    "fulbitos": {
      "my_fulbitos": [
        {
          "id": 3,
          "name": "Veteranos 47",
          "place": "Cancha San Jose",
          "day": "saturday",
          "hour": "16:00:00",
          "registration_start_day": "monday",
          "registration_start_hour": "20:00:00",
          "capacity": 10,
          "owner_name": "vikix302",
          "owner_phone": "+5493812135818",
          "owner_photo": "/media/user_photos/7/scaled_1000096999.png",
          "invitation_id": 3,
          "type": "invite",
          "message": "puedes venir por favor",
          "created_at": "2025-09-16T15:29:39.448543Z",
          "updated_at": "2025-09-18T21:49:54.436656Z",
          "registration_status": {  // NUEVOS CAMPOS
            "is_open": false,
            "opens_at": "2024-09-21T22:00:00Z",
            "registered_count": 3,
            "capacity": 10,
            "can_register": false,
            "is_user_registered": false,
            "user_position": null
          }
        }
      ],
      "pending_fulbitos": []
    },
    "network_users": {
      "my_network": [],
      "pending_invitations": []
    }
  }
}
```

**L√≥gica del Backend**:
- Calcular `nearby_fulbito_seconds` como el menor tiempo hasta la pr√≥xima apertura de inscripci√≥n
- Para cada fulbito, calcular `registration_status`:
  - `is_open`: si `registration_start_day` y `registration_start_hour` ya pasaron
  - `opens_at`: timestamp de cuando se abre la inscripci√≥n
  - `registered_count`: cantidad de jugadores inscritos
  - `can_register`: si est√° abierto y el usuario no est√° inscrito
  - `is_user_registered`: si el usuario ya est√° inscrito
  - `user_position`: posici√≥n del usuario si est√° inscrito

## üóÑÔ∏è MODELOS DE BASE DE DATOS

### Tabla: fulbito_registrations
```sql
CREATE TABLE fulbito_registrations (
    id SERIAL PRIMARY KEY,
    fulbito_id INTEGER NOT NULL REFERENCES fulbitos(id),
    user_id INTEGER NOT NULL REFERENCES users(id),
    registered_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    position INTEGER NOT NULL,
    is_substitute BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(fulbito_id, user_id)
);

CREATE INDEX idx_fulbito_registrations_fulbito_id ON fulbito_registrations(fulbito_id);
CREATE INDEX idx_fulbito_registrations_user_id ON fulbito_registrations(user_id);
CREATE INDEX idx_fulbito_registrations_registered_at ON fulbito_registrations(registered_at);
```

### Tabla: fulbitos (ACTUALIZAR)
```sql
-- Agregar campos si no existen
ALTER TABLE fulbitos ADD COLUMN IF NOT EXISTS capacity INTEGER DEFAULT 10;
ALTER TABLE fulbitos ADD COLUMN IF NOT EXISTS registration_start_day VARCHAR(20);
ALTER TABLE fulbitos ADD COLUMN IF NOT EXISTS registration_start_hour TIME;
```

## ‚öôÔ∏è L√ìGICA DE NEGOCIO

### 1. C√°lculo de Timing
```python
def calculate_registration_status(fulbito):
    now = datetime.now()
    registration_start = get_registration_start_datetime(fulbito)
    
    is_open = now >= registration_start
    opens_at = registration_start.isoformat()
    time_until_open = registration_start - now
    
    return {
        'is_open': is_open,
        'opens_at': opens_at,
        'time_until_open': str(time_until_open)
    }
```

### 2. Manejo de Capacidad
```python
def register_user_for_fulbito(fulbito_id, user_id):
    fulbito = get_fulbito(fulbito_id)
    current_registrations = get_registration_count(fulbito_id)
    
    if current_registrations < fulbito.capacity:
        # Inscribir normalmente
        position = current_registrations + 1
        is_substitute = False
    else:
        # Agregar como suplente
        position = current_registrations + 1
        is_substitute = True
    
    create_registration(fulbito_id, user_id, position, is_substitute)
    return position, is_substitute
```

### 3. C√°lculo de nearby_fulbito_seconds
```python
def calculate_nearby_fulbito_seconds(user_fulbitos):
    min_seconds = float('inf')
    
    for fulbito in user_fulbitos:
        registration_start = get_registration_start_datetime(fulbito)
        now = datetime.now()
        
        if registration_start > now:
            seconds_until = (registration_start - now).total_seconds()
            min_seconds = min(min_seconds, seconds_until)
    
    return int(min_seconds) if min_seconds != float('inf') else None
```

## üîí VALIDACIONES Y SEGURIDAD

### 1. Validaciones de Inscripci√≥n
- [ ] Usuario autenticado
- [ ] Fulbito existe y est√° activo
- [ ] Usuario tiene acceso al fulbito (invitado o admin)
- [ ] Inscripci√≥n est√° abierta
- [ ] Usuario no est√° ya inscrito
- [ ] Fulbito no est√° cancelado

### 2. Validaciones de Timing
- [ ] Verificar que `registration_start_day` y `registration_start_hour` son v√°lidos
- [ ] Manejar zonas horarias correctamente
- [ ] Validar que la inscripci√≥n no se abre en el pasado

### 3. Validaciones de Capacidad
- [ ] Verificar que `capacity` es un n√∫mero positivo
- [ ] Manejar casos de capacidad 0
- [ ] Validar que no se exceda la capacidad

## üìä CASOS DE USO

### Caso 1: Inscripci√≥n Normal
1. Usuario hace POST a `/api/auth/fulbito/{id}/register/`
2. Sistema verifica que inscripci√≥n est√° abierta
3. Sistema verifica que hay capacidad
4. Sistema inscribe al usuario
5. Sistema retorna posici√≥n y timestamp

### Caso 2: Capacidad Llena
1. Usuario hace POST a `/api/auth/fulbito/{id}/register/`
2. Sistema verifica que inscripci√≥n est√° abierta
3. Sistema verifica que NO hay capacidad
4. Sistema agrega como suplente
5. Sistema retorna posici√≥n y flag de suplente

### Caso 3: Usuario Ya Inscrito
1. Usuario hace POST a `/api/auth/fulbito/{id}/register/`
2. Sistema verifica que usuario ya est√° inscrito
3. Sistema retorna error con mensaje apropiado

### Caso 4: Inscripci√≥n Cerrada
1. Usuario hace POST a `/api/auth/fulbito/{id}/register/`
2. Sistema verifica que inscripci√≥n est√° cerrada
3. Sistema retorna error con mensaje apropiado

## üö® MANEJO DE ERRORES

### Errores Comunes
```json
// Inscripci√≥n cerrada
{
  "status": "error",
  "message": "La inscripci√≥n est√° cerrada",
  "code": "REGISTRATION_CLOSED"
}

// Usuario ya inscrito
{
  "status": "error",
  "message": "Ya est√°s inscrito en este fulbito",
  "code": "ALREADY_REGISTERED"
}

// Fulbito no encontrado
{
  "status": "error",
  "message": "Fulbito no encontrado",
  "code": "FULBITO_NOT_FOUND"
}

// Sin acceso al fulbito
{
  "status": "error",
  "message": "No tienes acceso a este fulbito",
  "code": "ACCESS_DENIED"
}
```

## üìà OPTIMIZACIONES

### 1. √çndices de Base de Datos
- √çndice en `fulbito_registrations(fulbito_id, registered_at)` para ordenamiento
- √çndice en `fulbito_registrations(user_id)` para b√∫squedas del usuario
- √çndice en `fulbitos(registration_start_day, registration_start_hour)` para timing

### 2. Cach√©
- Cachear `nearby_fulbito_seconds` por 30 segundos
- Cachear estado de inscripci√≥n por 10 segundos
- Invalidar cache cuando se hace una inscripci√≥n

### 3. Concurrencia
- Usar transacciones para inscripciones
- Implementar lock optimista para evitar doble inscripci√≥n
- Manejar race conditions en capacidad

## üß™ TESTING

### Tests Unitarios
- [ ] C√°lculo de timing correcto
- [ ] Manejo de capacidad
- [ ] Validaciones de acceso
- [ ] C√°lculo de posiciones

### Tests de Integraci√≥n
- [ ] Flujo completo de inscripci√≥n
- [ ] Manejo de errores
- [ ] Sincronizaci√≥n de timing
- [ ] Casos de concurrencia

### Tests de Performance
- [ ] Tiempo de respuesta de APIs
- [ ] Manejo de m√∫ltiples usuarios
- [ ] Escalabilidad de base de datos

## üìã CHECKLIST DE IMPLEMENTACI√ìN

### Backend
- [ ] Crear tabla `fulbito_registrations`
- [ ] Agregar campos a tabla `fulbitos`
- [ ] Implementar API GET `/api/auth/fulbito/{id}/registrations/`
- [ ] Implementar API POST `/api/auth/fulbito/{id}/register/`
- [ ] Actualizar API GET `/api/auth/invitation/all/`
- [ ] Implementar l√≥gica de timing
- [ ] Implementar manejo de capacidad
- [ ] Agregar validaciones y seguridad
- [ ] Implementar manejo de errores
- [ ] Agregar √≠ndices de base de datos
- [ ] Implementar cach√©
- [ ] Escribir tests
- [ ] Documentar APIs

### Consideraciones Adicionales
- [ ] Manejo de zonas horarias
- [ ] Logging de inscripciones
- [ ] M√©tricas de performance
- [ ] Monitoreo de errores
- [ ] Backup de datos
- [ ] Escalabilidad horizontal

---

**NOTA**: Este documento debe ser actualizado conforme se implemente la funcionalidad. Mantener sincronizado con el c√≥digo real.
